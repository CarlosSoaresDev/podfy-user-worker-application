AWSTemplateFormatVersion: 2010-09-09
Description: Up services to user worker application [Roles, SG, Ecs and LogGroup]

Parameters:
  VPC:
    Type: String
  PrivateSubnetOne:
    Type: String
  PrivateSubnetTwo:
    Type: String
  DockerImage:
    Type: String
  ServiceName:
    Type: String
  ClusterName:
    Type: String
  Environment:
    Description: Name of the environment launch.
    Type: String
  SQSQueueName:
    Type: String
  AccessKey:
    Type: String
  SecretKey:
    Type: String
  EmailSender:
    Type: String

Resources:
# -------------------------------------------------------------------------
# Deploy IAM Role to ECS
# -------------------------------------------------------------------------
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

# -------------------------------------------------------------------------
# Deploy SG Ec2
# -------------------------------------------------------------------------
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: !Ref VPC

# -------------------------------------------------------------------------
# Deploy ECS Fargate service and Tasks definition
# -------------------------------------------------------------------------
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref DockerImage
          Essential: true
          Environment:
            - Name: "ENVIRONMENT"
              Value: !Ref Environment
            - Name: "ASPNETCORE_ENVIRONMENT"
              Value: !Ref Environment
            - Name: "SQS_URL"
              Value: !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SQSQueueName}
            - Name: "ACCESS_KEY"
              Value: !Ref AccessKey
            - Name: "SECRET_KEY"
              Value: !Ref SecretKey
            - Name: "EMAIL_SENDER"
              Value: !Ref EmailSender
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
 
  Service:
    Type: AWS::ECS::Service
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200       
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 400
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetOne
            - !Ref PrivateSubnetTwo
          SecurityGroups:
            - !Ref ContainerSecurityGroup

# -------------------------------------------------------------------------
# Deploy Log group
# -------------------------------------------------------------------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]